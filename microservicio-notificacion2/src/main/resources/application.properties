spring.application.name=notificacion-service
spring.datasource.url=jdbc:h2:mem:notificaciondb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
server.port=8087

# Configuración correcta para Spring Security con OAuth2 Resource Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/gimnasio
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Configuración de Keycloak (esto solo es útil si usas el adaptador de Keycloak, no con Spring Security moderno)
keycloak.auth-server-url=http://localhost:8080/auth
keycloak.realm=gimnasio
keycloak.resource=notificacion-service
keycloak.public-client=false
keycloak.credentials.secret=ExpNYVHNcf7jGHd88nO8eoQtjgJF3Lad

# Logging para depuración
logging.level.org.springframework.security=DEBUG

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

spring.kafka.bootstrap-servers=localhost:29092 
spring.kafka.consumer.group-id=monitoreo-grupo
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# Eureka Client Configuration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Opcional: si quieres ver en logs que el registro fue exitoso
logging.level.com.netflix.discovery=DEBUG